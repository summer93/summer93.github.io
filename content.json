[{"title":"实现popup","date":"2017-11-09T00:45:57.000Z","path":"2017/11/09/实现popup/","text":"1234567891011121314151617# views.pydef test(request): user_group_list = models.Role.objects.all() return render(request,&apos;test.html&apos;,&#123;&apos;user_group_list&apos;: user_group_list&#125;)def add_test(request): if request.method == &apos;GET&apos;: return render(request,&apos;add_test.html&apos;) else: popid = request.GET.get(&apos;popup&apos;) if popid: title = request.POST.get(&apos;title&apos;) print(title,&apos;---------&apos;) obj = models.Role.objects.create(name=title) return render(request,&apos;popup_response.html&apos;,&#123;&apos;id&apos;:obj.id,&apos;title&apos;:obj.name,&apos;popid&apos;:popid&#125;) 123456789101112131415161718192021222324252627282930313233343536&lt;!-- test.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;add-test&lt;/h3&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;select name=&quot;&quot; id=&quot;ugID&quot;&gt; &#123;% for row in user_group_list %&#125; &lt;option value=&quot;&#123;&#123; row.pk &#125;&#125;&quot;&gt;&#123;&#123; row.name &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125; &lt;/select&gt; &lt;a href=&quot;#&quot; onclick=&quot;popupUrl(&apos;/add_test/?popup=ugID&apos;)&quot;&gt;添加&lt;/a&gt; &lt;/form&gt; &lt;script&gt; function popupUrl(url) &#123; window.open(url,&apos;x1&apos;,&apos;status=1,height:500,width:600,toolbar=0,resizeable=0&apos;); &#125; function popupCallBack1(popid,opid,optext) &#123; var tag = document.createElement(&apos;option&apos;); tag.innerHTML = optext; tag.setAttribute(&apos;value&apos;,opid); tag.setAttribute(&apos;selected&apos;,&apos;selected&apos;); document.getElementById(popid).appendChild(tag) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324&lt;!-- add_test.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;添加数据&lt;/h1&gt; &lt;form method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;a href=&quot;&quot; onclick=&quot;popupUrl(&apos;/xxxxx/&apos;)&quot;&gt;再发一个&lt;/a&gt; &lt;script&gt; function popupUrl(url) &#123; window.open(url,&apos;x2&apos;,&apos;status=1,height:500,width:600,toolbar=0,resizeable=0&apos;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617&lt;!-- popup_response.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;正在关闭的pop页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; opener.popupCallBack1(&apos;&#123;&#123; popid &#125;&#125;&apos;,&apos;&#123;&#123; id &#125;&#125;&apos;,&apos;&#123;&#123; title &#125;&#125;&apos;); window.close() &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Django-中间件01","date":"2017-11-09T00:31:27.000Z","path":"2017/11/09/Django-中间件01/","text":"django 中的中间件（middleware），在django中，中间件其实就是一个类，在请求到来和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法。请求过来，先经过所有的process_request(),到视图函数后，经过所有的process_response返回。 但是如果中某一个process_request()有了返回值，找到它自己所对应的process_respons()直接返回。 1.10版本之后都是这样的流程，之前的版本，如果process_request()有了返回值，会到最后一个process_respons()，然后返回 。###5个方法 process_request()、process_response()123456789101112131415161718192021222324252627282930313233343536373839404142# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# setting.pyMIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, .......... &apos;md.M1&apos;, &apos;md.M2&apos;,]# views.pydef test(request): print(&apos;ok&apos;) return HttpResponse(&apos;ok&apos;)# 输出结果m1.process_requestm2.process_requestokm2.process_responsem1.process_response process_view(),12345678910111213141516171819202122232425262728# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewokm2.process_responsem1.process_response 1234567891011121314151617181920212223242526272829# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewokm2.process_responsem1.process_response 123456789101112131415161718192021222324252627282930# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) response = callback(request,*callback_args, **callback_kwargs) return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewokm2.process_responsem1.process_response process_exception()123456789101112131415161718192021222324252627282930313233343536373839404142434445# views.py 在视图函数中添加错误进行测试def test(request): print(&apos;ok&apos;) int(&apos;test&apos;) return HttpResponse(&apos;ok&apos;)# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) # response = callback(request,*callback_args, **callback_kwargs) # return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m1.process_exception&apos;)class M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m2.process_exception&apos;)# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewokm2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Hello World","date":"2017-11-08T23:14:18.000Z","path":"2017/11/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]