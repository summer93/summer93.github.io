[{"title":"MySQl操作整理01","date":"2016-12-09T00:30:27.000Z","path":"2016/12/09/MySQl操作整理01.md/","text":"连接数据库： 12mysql -u [useename] -pmysql -u [username] -h [host] -p 用户管理： 1234567create user &apos;spring&apos;@&apos;192.168.1.1&apos; identified by &apos;123&apos;;create user &apos;spring&apos;@&apos;192.168.1.%&apos; identified by &apos;123&apos;;create user &apos;spring&apos;@&apos;%&apos; identified by &apos;123&apos;;drop user &apos;spring&apos;@&apos;%&apos;;rename user &apos;spring&apos;@&apos;%&apos; to &apos;new_spring&apos;@&apos;%&apos;;set password for &apos;spring&apos;@&apos;%&apos; = password(&apos;ab123&apos;); 权限管理： 123grant select,insert,update on db1.t1 to &apos;spring&apos;@&apos;%&apos;;grant all privileges on db1.t1 to &apos;spring&apos;@&apos;%&apos;;revoke all privileges on db1.t1 from &apos;spring&apos;@&apos;%&apos;; 数据库操作： 12345create database db1 default charset=utf8;create database db1 default charset utf8;drop database db1;show databases; – ####对数据表的操作：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677show tables;create table t1( 列名 类型 null, 列名 类型 not null, 列名 类型 not null auto_increment primary key, id int, name char(10))engine=innodb default charset=utf8; # innodb 支持事物，原子性操作 **** # myisam not null：是否为空 auto_increment 表示自增 primary key 主键表示约束(不能重复且不能为空)；加速查找；加速查找 一个表只能有一个主键 主键可以由多列组成create table t2( nid int(11) not null auto_increment, pid int(11) not null, num int(11), primary key(nid,pid))engine=innodb default charset=utf8;create table t3( id int auto_increment primary key, name char(10), id1 int, id2 int, constraint fk_t3_t2 foreign key(id1,id2) reference t2(nid,pid))engine=innodb default charset=utf8;外键: create table department( id bigint auto_increment primary key, title char(15) )engine=innodb default charset=utf8; create table userinfo( uid bigint auto_incremant peimary, name varchar(32), department_id int, constraint fk_user_depar foreign key (department_id) reference color(id) )engine=innodb default charset=utf8;清空表: delete from t1; truncate table t1; #清除auto_increment自增删除表: drop table t1;修改表: 添加列: alter table 表名 add 列名 类型; 删除列: alter table 表名 drop column 列名； 修改列: alter table 表名 modify column 列名 类型; -- 类型 alter table 表名 change 原列名 新列名 类型；-- 列名,类型 添加主键: alter table 表名 add primary key(列名) 删除主键: alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 添加外键: alter table 从表 add constraint 外键名(形如:FK_从表_主表) foreign key 从表(外键字段) references 主键(主键字段)； 删除外键: alter table 表名 drop foreign key 外键名称 修改默认值： alter table 表名 auto_increment=20;查看表结构: desc t1;查看创建表信息: show create table t1; ####数据类型：123456789101112131415161718192021222324 数据类型: 数字、字符串、时间类型 数字: tinyint int bigint float double decimal 字符串: char(10) 速度快 (10)示10个字符 varchar(10) 节省空间 PS:创建数据表长列往前放 时间类型 datetime enum set create table t1( id int signed auto_increment primary key, num decimal(10,5), name char(10) )engine=innodb default charset=utf8;#拿tinyint字段来举例，unsigned后，字段的取值范围是0~255，而signed的范围是-128~127 ####对数据行进行操作: 123456789101112insert into t1(name,age) values(&apos;autumn&apos;,18),(&apos;spring&apos;,19);insert into t1(name,age) select name,age from tb2;delete from t1 where id &gt;6;delete from t1 where id != 6;truncate table t1; #清除auto_increment自增update t1 set name=&apos;root&apos; where id=5;update t1 set name =&apos;autumn&apos; where id=6 and age=18; select * from t1;select id,name from t1; ##查询操作 临时表： 1select num,course_id from (select num,course_id from score where num &gt;60) as B; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869select * from t1;select * from t1 where id=1;select * from t1 where id!=2;select * from t1 where id &gt;2;select * from t1 where id &gt;=2 and name=&apos;spring&apos;;select name,age from t1;select * from t1 where id in (1,2,3);select * from t1 where id not in (1,2,3);select * from t1 where id in (select id from t2);select * from t1 where id between 5 and 12;包括2和12通配符: select * from t1 where name like &quot;a%&quot; select * from t1 where name like &quot;a_&quot;分页: select * from t1 limit 10; select * from t1 limit 0,10; select * from t1 limit 10,10; select * from t1 limit 2 offset 4; 从第5个开始往后2个排序: select * from t1 order by id desc;从大到小 select * from t1 order by id asc; 从小到大 select * from t2 order by id desc, age asc; distinct: select DISTINCT student_id from score where num &lt; 60 取最后5条数据 select * from t1 order by id desc limit 5;分组: select count(1),max(id),part_id from userinfo group by part_id; count() max() min() sum() avg() *******如果对聚合函数进行二次筛选时，必须使用having****** select count(1),max(id),part_id from userinfo group by part_id having count(id) &gt; 1; select count(id),part_id from userinfo where id &gt;0 group by part_id having count(id) &gt; 1;连表操作: select * from userinfo,department;笛卡尔基 select * from userinfo,department where userinfo.uid =department.id select * from userinfo left join department on userinf.uid = department.id(在之前版本的myqsl中 这两种方式是有性能差别，但是在现在版本的mysql中性能是一样的，推荐用 left join 的方法) select * from userinfo right join department on userinfo.uid = department.id left:左边表全显示，right:右边全显示 select * from userinfo innder join department on userinfo.uid = department.id 将出现null的一行隐藏 select * from department5 left join userinfo5 on userinfo5.part_id =department5.id left join userinfo6 on userinfo5.part_id =department5.id select score.sid, student.sid from score left join student on score.student_id = student.sid left join course on score.course_id = course.cid left join class on student.class_id = class.cid left join teacher on course.teacher_id=teacher.tid select count(id) from userinfo; 12345678910111213class UserInfo(models.Model): nid = models.BigAutoField(primary_key=True) username = models.CharField(max_length=32) password = models.CharField(max_length=64) age = models.IntegerField()#➜ task003 git:(master) ✗ python3 manage.py makemigrationsYou are trying to add a non-nullable field &apos;age&apos; to userinfo without a default; we can&apos;t do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.pySelect an option:","tags":[{"name":"数据库","slug":"数据库","permalink":"http://midsummer.com/tags/数据库/"},{"name":"MySQL","slug":"MySQL","permalink":"http://midsummer.com/tags/MySQL/"}]},{"title":" js/jQuery创建新标签","date":"2016-12-09T00:30:27.000Z","path":"2016/12/09/js|jQuery 创建新标签/","text":"js1234567891011121314151617181920var div = document.getElementById(&quot;div_1&quot;);var eleA = document.createElement(&quot;a&quot;);eleA.setAttribute(&quot;href&quot;, &quot;http://www.baidu.com&quot;);eleA.innerHTML = &quot;百度&quot;;div.appendChild(eleA);getElementById()getElementsByTagName()getElementsByClassName()getElementsByName()elementNode.setAttribute(name,value)elementNode.getAttribute(name)elementNode.removeChild(node)elementNode.classNameelementNode.classList.addelementNode.classList.remove jQuery12345678910111213141516171819202122232425$(&quot;&quot;).addClass(class|fn)$(&quot;&quot;).removeClass([class|fn])--------------------------属性$(&quot;&quot;).attr();$(&quot;&quot;).removeAttr();$(&quot;&quot;).prop();$(&quot;&quot;).removeProp();--------------------------HTML代码/文本/值$(&quot;&quot;).html([val|fn])$(&quot;&quot;).text([val|fn])$(&quot;&quot;).val([val|fn|arr])---------------------------$(&quot;#c1&quot;).css(&#123;&quot;color&quot;:&quot;red&quot;,&quot;fontSize&quot;:&quot;35px&quot;&#125;)查找所有兄弟标签： $(&quot;div&quot;).siblings()$(&quot;ul li&quot;).hasclass(&quot;test&quot;)$(&apos;[id=&quot;div1&quot;]&apos;) $(&apos;[&quot;alex=&quot;sb&quot;][id]&apos;)$(&quot;li:first&quot;) $(&quot;li:eq(2)&quot;) $(&quot;li:even&quot;) $(&quot;li:gt(1)&quot;)","tags":[{"name":"前端","slug":"前端","permalink":"http://midsummer.com/tags/前端/"}]},{"title":"MySQL整理 -补充02","date":"2016-12-09T00:30:27.000Z","path":"2016/12/09/MySQL整理 -补充02/","text":"备份： 12345678备份：数据表结构＋数据mysqldump -u root db1 &gt; db1.sql -p备份：数据表结构mysqldump -u root -d db1 &gt; db1.sql -p执行文件：create database db2;mysql -u root -d db5 &lt; db1.sql -p; 外键的变种 123456789101112131415161718192021222324- 一对多 用户和部门表： 用户： 1. spring 1 2. root 2 3. autumn 3 4. summer 4 部门： 1 服务 2 保安 3 公关- 一对一 用户和博客表： 用户： 1. spring 2. root 3. autumn 4. summer 博客表: fk() ＋unique唯一索引 1 /spring333/ 1 2 /root123/ 2 3 /zzzzzz/ 3 4 /summer1019/ 4- 多对多 12345678910111213141516171819202122232425用户表主机表用户主机关系表create table userinfo2( id int auto_increment primary key, name char(10), gender char(10), email varchar(64))engine=innodb default charset=utf8;create table host( id int auto_increment primary key, hostname char(64))engine=innodb default charset=utf8;create table user2host( id int auto_increment primary key, userid int not null, hostid int not null, unique uq_user_host (userid,hostid), CONSTRAINT fk_u2h_user FOREIGN key (userid) REFERENCES userinfo2(id), CONSTRAINT fk_u2h_host FOREIGN key (hostid) REFERENCES host(id))engine=innodb default charset=utf8;","tags":[{"name":"数据库","slug":"数据库","permalink":"http://midsummer.com/tags/数据库/"},{"name":"MySQL","slug":"MySQL","permalink":"http://midsummer.com/tags/MySQL/"}]},{"title":"MySQL-索引03","date":"2016-12-09T00:30:27.000Z","path":"2016/12/09/MySQL-索引03/","text":"主键索引 普通索引 唯一索引 联合(组合)索引 联合主键索引 联合普通索引 联合唯一索引 －－－－－－－－－－－－－－－－－－－ 主键索引 123456789101112131415161718create tabel tb1( id int auto_increment priamry key, name char(32) not null, age int not null)engine=innodb default utf8;create tabel tb1( id int auto_increment, name char(32) not null, age int not null， primary key (id))engine=innodb default utf8;添加主键: alter table 表名 add primary key(列名)删除主键: alter table 表名 drop primary key; alter table 表名 modify 列名 int, drop primary key; 普通索引 12345678910111213create table tb1( id int auto_increment primary key, name char(32) not null, age int(10) not null, index ix_name (name))engine=innodb default charset utf8;create index ix_name on tb1(name);drop index ix_name on tb1;show index from tb1;create index ix_name on tb1(name(2));如果建立索引的对象是二进制blob()和text类型时，必须像上面这一在括号内指定长度。 唯一索引 唯一约束(不能重复)和加速索引的功能 唯一索引和主键索引的区别：unique 可以为空null，而primary key 不能为空123456789create table tb1( id int auto_increment primary key, name char(32) not null, age int(10) not null, email char(32) not null, unique ui_email (email))create unique index ui_email on tb1(email);drop unique index ui_email on tb1; 组合索引 12345678create unique index ui_index on tb1(name,email);drop unique index ui_index on tb1;如上创建组合索引之后，查询：name and email -- 使用索引name -- 使用索引email -- 不使用索引注意：对于同时搜索n个条件时，组合索引的性能好于多个单一索引合并。","tags":[{"name":"数据库","slug":"数据库","permalink":"http://midsummer.com/tags/数据库/"},{"name":"MySQL","slug":"MySQL","permalink":"http://midsummer.com/tags/MySQL/"}]},{"title":"MySQl-SQLAlchemy04","date":"2016-12-09T00:30:27.000Z","path":"2016/12/09/MySQL-SQLAchemy04/","text":"ORM技术: Object_Relational Mapping 把关系数据库的表结构映射到对象上。 SQLAlchemy: SQLalchemy 是python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。 12345678910from sqlalchemy import create_engineengine = create_engine(&quot;mysql+pymysql://root:ab931019@127.0.0.1:3306/day0613?charset=utf8&quot;, max_overflow=5)cur =engine.execute(&apos;show databases&apos;)res = cur.fetchall()for row in res: print(row[0]) ORM功能使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123from sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index, VARCHARfrom sqlalchemy.orm import sessionmaker, relationshipfrom sqlalchemy import create_engine# engine = create_engine(&quot;mysql+pymysql://root:ab931019@127.0.0.1:3306/day0613?charset=utf8&quot;, max_overflow=5)# cur = engine.execute(# &quot;insert into users(name,email,user_type_id) values(&apos;ddddddd&apos;,&apos;dddssssss&apos;,3)&quot;# )Base = declarative_base()class User(Base): __tablename__ = &apos;usersinfo&apos; id = Column(Integer,primary_key=True) name = Column(String(32)) age = Column(Integer) __table_args__=( UniqueConstraint(&apos;id&apos;,&apos;name&apos;,name=&apos;uix_id_name&apos;), Index(&apos;ix_id_name&apos;,&apos;id&apos;,&apos;name&apos;), )#一对多class UserType(Base): __tablename__ = &apos;usertype&apos; id = Column(Integer, primary_key=True, autoincrement=True) title = Column(VARCHAR(32), nullable=True, index=True)class Users(Base): __tablename__ = &apos;users&apos; id = Column(Integer, primary_key=True, autoincrement=True) name = Column(VARCHAR(32), nullable=True, index=True) email = Column(VARCHAR(16), unique=True) user_type_id = Column(Integer,ForeignKey(&quot;usertype.id&quot;)) user_type = relationship(&quot;UserType&quot;,backref=&apos;xxoo&apos;)# 多对多class Group(Base): __tablename__ = &apos;group&apos; id = Column(Integer, primary_key=True) name = Column(String(64), unique=True, nullable=False) port = Column(Integer, default=22)class Server(Base): __tablename__ = &apos;server&apos; id = Column(Integer, primary_key=True, autoincrement=True) hostname = Column(String(64), unique=True, nullable=False)class ServerToGroup(Base): __tablename__ = &apos;servertogroup&apos; nid = Column(Integer, primary_key=True,autoincrement=True) server_id = Column(Integer, ForeignKey(&apos;server.id&apos;)) group_id = Column(Integer, ForeignKey(&apos;group.id&apos;))def init_db(): Base.metadata.create_all(engine)def drop_db(): Base.metadata.drop_all(engine)engine = create_engine(&quot;mysql+pymysql://root:ab931019@127.0.0.1:3306/day0613?charset=utf8&quot;, max_overflow=5)Base.metadata.create_all(engine)session = sessionmaker(bind=engine)session = session()type_list =session.query(UserType)for row in type_list: print(row.id,row.title,row.xxoo[0].name)print(&apos;&apos;.center(100,&apos;-&apos;))type_list =session.query(Users)for row in type_list: print(row.id,row.name,row.user_type.title)#增# obj1 = UserType(title=&apos;普通用户&apos;)# session.add(obj1)# objs = [# UserType(title=&apos;超级用户&apos;),# UserType(title=&apos;白金用户&apos;),# UserType(title=&apos;黑金用户&apos;)# ]# session.add_all(objs)# 删# session.query(UserType.id,UserType.title).filter(UserType.id &lt;= 2).delete()# 改# session.query(UserType.id,UserType.title).filter(UserType.id == 3).update(&#123;&apos;title&apos;:&apos;黑金黑金&apos;&#125;)# session.query(UserType.id,UserType.title).filter(UserType.id &gt;2).update(&#123;UserType.title:UserType.title+&apos;xx&apos;&#125;,synchronize_session=False)# session.query(UserType.id,UserType.title).filter(UserType.id &gt; 2).update(&#123;&apos;num&apos;:User.num+1&#125;,synchronize_session=&apos;evaluate&apos;)session.commit()session.close()","tags":[{"name":"数据库","slug":"数据库","permalink":"http://midsummer.com/tags/数据库/"}]},{"title":"Django-中间件02","date":"2016-11-09T01:39:28.000Z","path":"2016/11/09/Django-中间件02/","text":"接着Django-中间件01 应用12345678910111213141516171819202122232425262728293031323334353637383940from django.utils.deprecation import MiddlewareMixinfrom django.shortcuts import HttpResponseclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) # response = callback(request,*callback_args, **callback_kwargs) # return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m1.process_exception&apos;)class M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m2.process_exception&apos;) return HttpResponse(&apos;有错误！&apos;)# 不会报错# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewokm2.process_exceptionm2.process_responsem1.process_response process_template_response()123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 对视图函数的返回值有一定的要求，在函数返回值中有render方法才执行。# views.pyfrom django.shortcuts import render,redirect,HttpResponse# Create your views here.class JsonResponse: def __init__(self,req,status,msg): self.req = req self.status = status self.msg = msg def render(self): import json ret = &#123; &apos;status&apos;: self.status, &apos;msg&apos;: self.msg &#125; return HttpResponse(json.dumps(ret))def test(request): return JsonResponse(request,True,&apos;错误信息！&apos;)# md.pyfrom django.utils.deprecation import MiddlewareMixinfrom django.shortcuts import HttpResponseclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) # response = callback(request,*callback_args, **callback_kwargs) # return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m1.process_exception&apos;) def process_template_response(self,request,response): print(&apos;m1.process_template_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m2.process_exception&apos;) return HttpResponse(&apos;有错误！&apos;)# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewm1.process_template_responsem2.process_responsem1.process_response","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"自定义分页","date":"2016-11-09T01:31:27.000Z","path":"2016/11/09/自定义分页/","text":"123456789101112def custom(request): current_Page = request.GET.get(&apos;page&apos;) current_Page = int(current_Page) per_page = 10 start = (current_Page - 1) * per_page end = current_Page * per_page user_list = models.UserInfo.objects.all()[start:end] return render(request,&apos;custom.html&apos;,&#123;&apos;user_list&apos;:user_list&#125;) 1234567891011&lt;body&gt;&lt;h1&gt;用户列表&lt;/h1&gt;&lt;ul&gt; &#123;% for row in user_list %&#125; &lt;li&gt;&#123;&#123; row.name &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;&lt;/body&gt; 改写成类 12345678910111213&lt;body &gt;&lt;h1&gt;用户列表&lt;/h1&gt;&lt;ul&gt; &#123;% for row in user_list %&#125; &lt;li&gt;&#123;&#123; row.name &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;&#123;&#123; page_info.pager|safe &#125;&#125;&#123;#xss攻击#&#125;&lt;/body&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class PageInfo(object): def __init__(self,current_Pag,all_count,per_page,show_page=11): try: self.current_Page = int(current_Pag) except Exception as e: self.current_Page = 1 self.all_count = all_count self.per_page = per_page a,b = divmod(all_count,per_page) if b: a = a + 1 self.all_pager = a self.show_page = show_page @property def start(self): return (self.current_Page - 1) * self.per_page @property def end(self): return self.current_Page * self.per_page @property def pager(self): page_list = [] half = int((self.show_page-1)/2) begin = self.current_Page - half stop = self.current_Page + half for i in range(begin,stop+1): if i == self.current_Page: temp = &quot;&lt;a style=&apos;color:red&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) else: temp = &quot;&lt;a style=&apos;display: inline;margin: 5px;padding: 5px&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) page_list.append(temp) return &apos;&apos;.join(page_list)def custom(request): all_count = models.UserInfo.objects.all().count() page_info =PageInfo(request.GET.get(&apos;page&apos;),all_count,10) user_list = models.UserInfo.objects.all()[page_info.start:page_info.end] return render(request,&apos;custom.html&apos;,&#123;&apos;user_list&apos;:user_list,&apos;page_info&apos;:page_info&#125;) 解决总页数 小于 show_page 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class PageInfo(object): def __init__(self,current_Pag,all_count,per_page,show_page=11): try: self.current_Page = int(current_Pag) except Exception as e: self.current_Page = 1 self.all_count = all_count self.per_page = per_page a,b = divmod(all_count,per_page) if b: a = a + 1 self.all_pager = a self.show_page = show_page @property def start(self): return (self.current_Page - 1) * self.per_page @property def end(self): return self.current_Page * self.per_page @property def pager(self): page_list = [] half = int((self.show_page-1)/2) if self.all_pager &lt; self.show_page: begin = 1 stop = self.all_pager else: begin = self.current_Page - half stop = self.current_Page + half for i in range(begin,stop+1): if i == self.current_Page: temp = &quot;&lt;a style=&apos;color:red&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) else: temp = &quot;&lt;a style=&apos;display: inline;margin: 5px;padding: 5px&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) page_list.append(temp) return &apos;&apos;.join(page_list)def custom(request): all_count = models.UserInfo.objects.filter(id__lt=22).count() page_info =PageInfo(request.GET.get(&apos;page&apos;),all_count,10) user_list = models.UserInfo.objects.filter(id__lt=22)[page_info.start:page_info.end] return render(request,&apos;custom.html&apos;,&#123;&apos;user_list&apos;:user_list,&apos;page_info&apos;:page_info&#125;) 解决选择开始几个页吗出现的问题 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class PageInfo(object): def __init__(self,current_Pag,all_count,per_page,show_page=11): try: self.current_Page = int(current_Pag) except Exception as e: self.current_Page = 1 self.all_count = all_count self.per_page = per_page a,b = divmod(all_count,per_page) if b: a = a + 1 self.all_pager = a self.show_page = show_page @property def start(self): return (self.current_Page - 1) * self.per_page @property def end(self): return self.current_Page * self.per_page @property def pager(self): page_list = [] half = int((self.show_page-1)/2) if self.all_pager &lt; self.show_page: begin = 1 stop = self.all_pager else: if self.current_Page &lt;= half: begin = 1 stop = self.show_page else: begin = self.current_Page - half stop = self.current_Page + half for i in range(begin,stop+1): if i == self.current_Page: temp = &quot;&lt;a style=&apos;color:red&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) else: temp = &quot;&lt;a style=&apos;display: inline;margin: 5px;padding: 5px&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) page_list.append(temp) return &apos;&apos;.join(page_list)def custom(request): all_count = models.UserInfo.objects.all().count() page_info =PageInfo(request.GET.get(&apos;page&apos;),all_count,10) user_list = models.UserInfo.objects.all()[page_info.start:page_info.end] return render(request,&apos;custom.html&apos;,&#123;&apos;user_list&apos;:user_list,&apos;page_info&apos;:page_info&#125;) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class PageInfo(object): def __init__(self,current_Pag,all_count,per_page,show_page=11): try: self.current_Page = int(current_Pag) except Exception as e: self.current_Page = 1 self.all_count = all_count self.per_page = per_page a,b = divmod(all_count,per_page) if b: a = a + 1 self.all_pager = a self.show_page = show_page @property def start(self): return (self.current_Page - 1) * self.per_page @property def end(self): return self.current_Page * self.per_page @property def pager(self): page_list = [] half = int((self.show_page-1)/2) if self.all_pager &lt; self.show_page: begin = 1 stop = self.all_pager else: if self.current_Page &lt;= half: begin = 1 stop = self.show_page else: if self.current_Page + half &gt; self.all_pager: begin = self.all_pager - self.show_page + 1 stop = self.all_pager else: begin = self.current_Page - half stop = self.current_Page + half for i in range(begin,stop+1): if i == self.current_Page: temp = &quot;&lt;a style=&apos;color:red&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) else: temp = &quot;&lt;a style=&apos;display: inline;margin: 5px;padding: 5px&apos; href=&apos;/custom.html?page=%s&apos;&gt;%s&lt;/a&gt;&quot;%(i,i,) page_list.append(temp) return &apos;&apos;.join(page_list)def custom(request): all_count = models.UserInfo.objects.all().count() page_info =PageInfo(request.GET.get(&apos;page&apos;),all_count,10) user_list = models.UserInfo.objects.all()[page_info.start:page_info.end] return render(request,&apos;custom.html&apos;,&#123;&apos;user_list&apos;:user_list,&apos;page_info&apos;:page_info&#125;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django 基础- 路由系统","date":"2016-11-09T01:31:27.000Z","path":"2016/11/09/Django 基础- 路由系统/","text":"创建Django项目1dajngo-admin startproject mysite 创建app 12python manage.py startapp app01python manage.py startapp app02 1.路由系统 1.单一路由对应 seo 搜索引擎的录入权重 12345678910&lt;ul&gt; &#123;% for item in user_list %&#125; &lt;li&gt;&#123;&#123; item &#125;&#125;|&lt;a href=&quot;/edit/?nid=&#123;&#123; item &#125;&#125;&quot;&gt;编辑&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;urlpatterns = [ url(r&apos;^index$&apos;, views.index),] /?id=XXXX/ 这样get传值，seo优先级不高 2.基于正则的路由1234567891011121314151617181920212223&lt;ul&gt; &#123;% for item in user_list %&#125; &lt;li&gt;&#123;&#123; item &#125;&#125;|&lt;a href=&quot;/edit/&#123;&#123; item &#125;&#125;&quot;&gt;编辑&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;&lt;ul&gt; &#123;% for item in user_list %&#125; &lt;li&gt;&#123;&#123; item &#125;&#125;|&lt;a href=&quot;/edit/&#123;&#123; item &#125;&#125;.html&quot;&gt;编辑&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;urlpatterns = [ url(r&apos;^edit/(\\w+)/&apos;, views.edit), url(r&apos;^edit/(\\w+).html$&apos;, views.edit), # 伪静态 seo 权重更高 # $ 终止符 如果遇到浏览器自动在末尾加/，清除缓存后解决。]def edit(request,a1): return HttpResponse(a1) 3.带参数的路由1234567891011121314&lt;ul&gt; &#123;% for item in user_list %&#125; &lt;li&gt;&#123;&#123; item &#125;&#125;|&lt;a href=&quot;/edit/&#123;&#123; item &#125;&#125;/33/&quot;&gt;编辑&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;urlpatterns = [ url(r&apos;^edit/(?P&lt;a1&gt;\\w+)/(?P&lt;a2&gt;\\w+)/&apos;, views.edit),]def edit(request,a1,a2): return HttpResponse(json.dumps((a1,a2))) 4.路由分发 12345678# urls.pyurlpatterns = [ url(r&apos;^app01/&apos;, include(&apos;app01.urls&apos;)),]# app01.urls.pyurlpatterns = [ url(r&apos;^index$&apos;, views.index),] 5.设置默认页面 123456def default(request): return HttpResponse(&apos;not find!&apos;)urlpatterns = [ url(r&apos;^&apos;,default),# 放在最后] 6.为路由映射设置别名 - 根据别名反向生成url 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950def index(request): user_list = [ &apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, ] v = reverse(&apos;n1&apos;) print(v) return render(request,&apos;index.html&apos;,&#123;&apos;user_list&apos;:user_list&#125;)urlpatterns = [ url(r&apos;^index/&apos;, views.index,name=&apos;n1&apos;),]&lt;body&gt; &lt;form method=&apos;POST&apos; action=&quot;&#123;%url &apos;n1&apos;%&#125;&quot; ...&lt;/body&gt;def edit(request,a1): v = reverse(&apos;n2&apos;,args=(1,)) print(v) return HttpResponse(json.dumps(a1))urlpatterns = [ url(r&apos;^edit/(\\w+)&apos;, views.edit,name=&apos;n2&apos;),]&lt;body&gt; &lt;form method=&apos;POST&apos; action=&quot;&#123;% url &apos;n1&apos; i %&#125;&quot; #传值 ...&lt;/body&gt;def edit(request,a1,a2): v = reverse(&apos;n2&apos;,kwargs=&#123;&apos;a1&apos;:222,&apos;a2&apos;:333&#125;) print(v) return HttpResponse(json.dumps((a1,a2)))urlpatterns = [ url(r&apos;^edit/(?P&lt;a1&gt;\\w+)/(?P&lt;a2&gt;\\w+)/&apos;, views.edit,name=&apos;n2&apos;),]","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-ORM多对多查询 (自定义第三张表&ManyToManyField)","date":"2016-11-09T01:31:27.000Z","path":"2016/11/09/Django-ORM多对多查询/","text":"对于多对多表 1.自定义第三张表，更加灵活 2.ManyToManyField 自动生成第3张表 只能 有3列数据 不能自己添加。 自定义第三张表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# models.pyclass Boy(models.Model): name = models.CharField(max_length=32)class Girl(models.Model): name = models.CharField(max_length=32)class Love(models.Model): b = models.ForeignKey(&apos;Boy&apos;) g = models.ForeignKey(&apos;Girl&apos;) # 创建联合唯一索引 # class Meta: # unique_together = [ # (&apos;b&apos;,&apos;g&apos;)， # ]# views.pydef test(request): # objs = [ # models.Boy(name=&apos;summer&apos;), # models.Boy(name=&apos;spring&apos;), # models.Boy(name=&apos;autumn&apos;), # ] # models.Boy.objects.bulk_create(objs,5) # objs = [ # models.Girl(name=&apos;小于&apos;), # models.Girl(name=&apos;小秋&apos;), # models.Girl(name=&apos;小夏&apos;), # ] # models.Girl.objects.bulk_create(objs,5)# 查询和girl小于有关系的boy# 1 通过girl表进行反向查找 obj = models.Girl.objects.filter(name=&apos;小于&apos;).first().love_set.all() # obj = models.Girl.objects.filter(name=&apos;小于&apos;).first().love_set.select_related(&apos;b&apos;).all() for i in obj: print(i.b.name) print(&apos; &apos;.center(60,&apos;=&apos;))# 2 通过Love表进行查找 obj = models.Love.objects.filter(g__name=&apos;小于&apos;).all() for i in obj: print(i.b.name) # 这样进行查询性能不好，需要重新发sql请求在进行查询另外一张表中的数据 boy_list = models.Love.objects.filter(g__name=&apos;小于&apos;).values(&apos;b__name&apos;) for i in boy_list: print(i[&apos;b__name&apos;]) # 这样 进行了 优化 不会重复发送sql请求，查询到的结果内是字典 boy_obj = models.Love.objects.filter(g__name=&apos;小于&apos;).select_related(&apos;b&apos;).all() for i in boy_obj: print(i.b.name) # select_related(&apos;ut&apos;) 相当 于 inner join 先连成一张表再进行查询 return HttpResponse(&apos;insert ok ....&apos;) ManyToManyField 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# models.pyfrom django.db import modelsclass Boy(models.Model): name = models.CharField(max_length=32) # m = models.ManyToManyField(&apos;Girl&apos;)class Girl(models.Model): name = models.CharField(max_length=32) m = models.ManyToManyField(&apos;Boy&apos;)# views.pydef test(request): # objs = [ # models.Boy(name=&apos;summer&apos;), # models.Boy(name=&apos;spring&apos;), # models.Boy(name=&apos;autumn&apos;), # ] # models.Boy.objects.bulk_create(objs,5) # objs = [ # models.Girl(name=&apos;小于&apos;), # models.Girl(name=&apos;小秋&apos;), # models.Girl(name=&apos;小夏&apos;), # ] # models.Girl.objects.bulk_create(objs,5) # ManyToManyField obj = models.Girl.objects.filter(name=&apos;小秋&apos;).first() # 增 # obj.m.add(3) # obj.m.add(3,4) # obj.m.add(*[1,2]) # 删 # obj.m.remove(3) # obj.m.remove(3,4) # obj.m.remove(*[1,2]) # 改 # obj.m.set([1,2,]) # boy_obj = obj.m.all() # for row in boy_obj: # print(row.id,row.name) # 清除 # obj.m.clear() # 反向查 在没有 ManyToManyField 字段的表中查 obj = models.Boy.objects.filter(name=&apos;summer&apos;).first() girl_obj = obj.girl_set.all() # 增删改查 obj.girl_set.set([1,2,3]) for row in girl_list: print(row.id,row.name) return HttpResponse(&apos;ok&apos;) 杂交 123456789101112131415161718192021222324252627# modles.pyclass Boy(models.Model): name = models.CharField(max_length=32)class Girl(models.Model): name = models.CharField(max_length=32) m = models.ManyToManyField(&apos;Boy&apos;,through=&apos;Love&apos;,through_fields=(&apos;b&apos;,&apos;g&apos;)) # 只让其生成3张表，如果不加后面产生生成4张表class Love(models.Model): b = models.ForeignKey(&apos;Boy&apos;) g = models.ForeignKey(&apos;Girl&apos;)# views.pydef test(request): obj = models.Girl.objects.filter(name=&apos;小于&apos;).first() # obj.m.add(1) # 不行 # obj.m.remove(1) # 不行 # obj.m.set([1,2]) # 不行 # obj.m.clear() # 可以 # obj.m.all() # 可以 # 杂交的方法对获取查询方便点，还添加了清空功能 boy_obj = obj.m.all() for i in boy_obj: print(i.name)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"生成随机验证码图片","date":"2016-11-09T00:45:57.000Z","path":"2016/11/09/生成随机验证码图片/","text":"安装 PIL模块 pip3 install pillow 生成 图片 12345678910from PIL import Imageimg = Image.new(mode=&apos;RGB&apos;,size=(120,30),color=(0,255,255))# 查看 图片# img.show()# 保存 图片 到本地with open(&apos;code.png&apos;,&apos;wb&apos;) as f: img.save(f,format=&apos;png&apos;) 创建画笔，在图片上画内容 1234567891011121314151617181920212223242526from PIL import Image,ImageDrawimg = Image.new(mode=&apos;RGB&apos;,size=(120,30),color=(0,255,255))draw = ImageDraw.Draw(img,mode=&apos;RGB&apos;)# 画点draw.point([100,10],fill=&apos;red&apos;)draw.point([100, 20], fill=&apos;red&apos;)draw.point([100, 25], fill=&apos;red&apos;)# 画线draw.line((10,10,100,20),fill=(255,0,255))# 画圆draw.arc((0,0,30,20),0,360,fill=&apos;red&apos;)# 写文字draw.text([0,0],&apos;python&apos;,&apos;red&apos;)# 加入特殊字体from PIL import ImageFontfont = ImageFont.truetype(&apos;kumo.ttf&apos;,28)draw.text([0,0],&apos;python&apos;,&apos;red&apos;，font=font) 上面 是把生成写入本地 这种方法是不好的，应该把这个图片写入到内存里 123456789101112131415from PIL import Image,ImageDraw,ImageFontfrom io import BytesIOf = BytesIO()img = Image.new(mode=&apos;RGB&apos;,size=(120,30),color=(0,255,255))draw = ImageDraw.Draw(img,mode=&apos;RGB&apos;)# .......img.save(f,&apos;png&apos;)# 取图片data = f.getvalue() 生成随机验证码图片 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# views.pydef check_code(request): from io import BytesIO from utils.random_check_code import rd_check_code img,code = rd_check_code() stream = BytesIO() img.save(stream,&apos;png&apos;) request.session[&apos;code&apos;] = code return HttpResponse(stream.getvalue())# random_check_code.pyfrom PIL import Image,ImageDraw,ImageFont,ImageFilterimport randomdef rd_check_code(width=120, height=30, char_length=5, font_file=&apos;kumo.ttf&apos;, font_size=28): code = [] img = Image.new(mode=&apos;RGB&apos;, size=(width, height), color=(255, 255, 255)) draw = ImageDraw.Draw(img, mode=&apos;RGB&apos;) def rndChar(): &quot;&quot;&quot; 生成随机字母 :return: &quot;&quot;&quot; return chr(random.randint(65, 90)) def rndColor(): &quot;&quot;&quot; 生成随机颜色 :return: &quot;&quot;&quot; return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255)) # 写文字 font = ImageFont.truetype(font_file, font_size) for i in range(char_length): char = rndChar() code.append(char) h = random.randint(0, 4) draw.text([i * width / char_length, h], char, font=font, fill=rndColor()) # 写干扰点 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) # 写干扰圆圈 for i in range(40): draw.point([random.randint(0, width), random.randint(0, height)], fill=rndColor()) x = random.randint(0, width) y = random.randint(0, height) draw.arc((x, y, x + 4, y + 4), 0, 90, fill=rndColor()) # 画干扰线 for i in range(5): x1 = random.randint(0, width) y1 = random.randint(0, height) x2 = random.randint(0, width) y2 = random.randint(0, height) draw.line((x1, y1, x2, y2), fill=rndColor()) img = img.filter(ImageFilter.EDGE_ENHANCE_MORE) return img,&apos;&apos;.join(code)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"}]},{"title":"xss跨站脚本攻击 ，csrf跨站请求伪造","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/xss跨站脚本攻击 ，csrf跨站请求伪造/","text":"xss攻击 跨站脚本攻击 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# views.pymsg = []def comment(request): if request.method == &apos;GET&apos;: return render(request,&apos;comment.html&apos;) else: v = request.POST.get(&apos;content&apos;) msg.append(v) return render(request, &apos;comment.html&apos;)def show(request): return render(request, &apos;index.html&apos;, &#123;&apos;msg&apos;: msg&#125;)# comment.html&lt;body&gt;&lt;h3&gt;评论&lt;/h3&gt;&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;content&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;# index.html&lt;body&gt;&lt;h3&gt;展示评论&lt;/h3&gt;&#123;% for item in msg %&#125; &lt;div&gt;&#123;&#123; item|safe &#125;&#125;&lt;/div&gt; # 加|safe&#123;% endfor %&#125;&lt;/body&gt;# 加|safe 是一种方法# 还有一种方法，在后台标记成安全的# from django.utils.safestring import mark_safe# temp = &apos;&lt;a href=&apos;http://taobao.com&apos;&gt;淘宝&lt;/a&gt;&apos;# newtemp = mark_safe(temp)# 然后 render 返回前段渲染 这样 也会被识别成安全的################ 措施# views.py# 对特殊字符进行过滤，对|safe和mark_safe使用要谨慎，如果要使用一定要进行过滤msg = []def comment(request): if request.method == &apos;GET&apos;: return render(request,&apos;comment.html&apos;) else: v = request.POST.get(&apos;content&apos;) if &apos;script&apos; in v: return render(request, &apos;comment.html&apos;,&#123;&apos;error&apos;:&apos;还想黑我&apos;&#125;) else: msg.append(v) return render(request, &apos;comment.html&apos;)def show(request): return render(request, &apos;index.html&apos;, &#123;&apos;msg&apos;: msg&#125;) csrf 跨站请求伪造 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123# csrf 用户访问需要携带随机字符串# views.pydef index2(request): if request.method == &apos;GET&apos;: return render(request,&apos;index.html&apos;) else: return HttpResponse(&apos;ok&apos;)# index.html&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; # 会自动生成input框冰隐藏，value值为随机字符串 &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;# &#123;% csrf_token %&#125;# &lt;input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;voopFnF1UhczvzVdMReXsZuvWiQmfqUhGqZa6yWMVxWNaaXr4hsJsfDic1lQkTLy&quot;&gt;# &#123;&#123; csrf_token &#125;&#125;# 如果写成这样 这是直接生成随机字符串# 不仅在 input 框里生成了随机字符串，在本地cookice 中也生成了随机字符串# 如果需要全站禁用csrf# setting.pyMIDDLEWARE = [ ....... # &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, .......]# 局部禁用# 单独在某个函数加装饰器from django.views.decorators.csrf import csrf_exempt@csrf_exemptdef index2(request): if request.method == &apos;GET&apos;: return render(request,&apos;index2.html&apos;) else: return HttpResponse(&apos;ok&apos;)# 局部使用from django.views.decorators.csrf import csrf_exempt,csrf_protect@csrf_protectdef index2(request): if request.method == &apos;GET&apos;: return render(request,&apos;index2.html&apos;) else: return HttpResponse(&apos;ok&apos;)]# 不用Form表单提交用Ajax提交&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input id=&quot;user&quot; type=&quot;text&quot; name=&quot;user&quot;&gt; &lt;a onclick=&quot;submitForm()&quot;&gt;提交&lt;/a&gt;&lt;/form&gt;&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function submitForm() &#123; var csrf = $(&apos;input[name=&quot;csrfmiddlewaretoken&quot;]&apos;).val(); var user = $(&apos;#user&apos;).val(); $.ajax(&#123; url: &apos;/index2.html&apos;, type: &apos;POST&apos;, data:&#123;&quot;user&quot;:user,&quot;csrfmiddlewaretoken&quot;:csrf&#125;, success:function (arg) &#123; console.log(arg) &#125; &#125;) &#125;&lt;/script&gt;&lt;/body&gt;# Ajax 请求头里把字符串传过去&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &#123;&#123; csrf_token &#125;&#125; &lt;input id=&quot;user&quot; type=&quot;text&quot; name=&quot;user&quot;&gt;&#123;# &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;#&#125; &lt;a onclick=&quot;submitForm()&quot;&gt;提交&lt;/a&gt;&lt;/form&gt;&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/jquery-cookie.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function submitForm() &#123; var token = $.cookie(&apos;csrftoken&apos;); var user = $(&apos;#user&apos;).val(); $.ajax(&#123; url: &apos;/index2.html&apos;, type: &apos;POST&apos;, headers:&#123;&apos;X-CSRFToken&apos;:token&#125;, data:&#123;&quot;user&quot;:user&#125;, success:function (arg) &#123; console.log(arg) &#125; &#125;) &#125;&lt;/script&gt;&lt;/body&gt;","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Ajax01","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/Ajax01/","text":"1.Ajax 1.原生Ajax,XMLHttpRequest 2.jQuery Ajax,内部基于’原生Ajax’ 2.伪Ajax，非XMLHttpRequest 3.跨域Ajax，JSONP 1.Ajax JQuery Ajax12345678910111213141516171819202122232425262728293031323334353637383940# views.pydef index(request): return render(request,&apos;index.html&apos;)def add1(request): print(request.POST) a1 = int(request.POST.get(&apos;il1&apos;)) a2 = int(request.POST.get(&apos;il2&apos;)) return HttpResponse(a1 + a2)# index.html&lt;body&gt; &lt;input type=&quot;text&quot; id=&quot;il1&quot; /&gt; + &lt;input type=&quot;text&quot; id=&quot;il2&quot; /&gt; = &lt;input type=&quot;text&quot; id=&quot;il3&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;JQuery Ajax&quot; id=&quot;btn1&quot; onclick=&quot;add1()&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;原生 Ajax&quot; id=&quot;btn2&quot; onclick=&quot;add2()&quot;&gt;&lt;/body&gt;&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // jQuery Ajax,内部基于&apos;原生Ajax&apos; function add1() &#123; $.ajax(&#123; url: &apos;/add1/&apos;, type: &apos;POST&apos;, data:&#123;&apos;il1&apos;:$(&apos;#il1&apos;).val(),&apos;il2&apos;:$(&apos;#il2&apos;).val()&#125;, success:function (arg) &#123; $(&apos;#il3&apos;).val(arg) &#125; &#125;) &#125;&lt;/script&gt; 原生Ajax,XMLHttpRequest12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# views.pydef add2(request): if request.method == &apos;GET&apos;: a1 = int(request.GET.get(&apos;il1&apos;)) a2 = int(request.GET.get(&apos;il2&apos;)) print(&apos;add2....&apos;) return HttpResponse(a1 + a2) else: a1 = int(request.POST.get(&apos;il1&apos;)) a2 = int(request.POST.get(&apos;il2&apos;)) return HttpResponse(a1 + a2)# index.html...&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt;# 原生Ajax,GET请求 function add2() &#123; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; if (xhr.readyState == 4)&#123; alert(xhr.responseText) &#125; &#125;; xhr.open(&apos;GET&apos;,&apos;/add2/?il1=12&amp;il2=19&apos;); xhr.send(); &#125;# 原生Ajax,POST请求 function add2() &#123; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; if (xhr.readyState == 4)&#123; alert(xhr.responseText) &#125; &#125;; xhr.open(&apos;POST&apos;,&apos;/add2/&apos;); xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);// 加请求头 xhr.send(&apos;il1=12&amp;il2=19&apos;); &#125;&lt;/script&gt; 2.伪Ajax，非XMLHttpRequest，iframe标签12345678910111213141516171819202122232425262728# iframe标签,不刷新发送Http请求# view.pydef autohome(request): if request.method == &apos;GET&apos;: return render(request,&apos;autohome.html&apos;)# autohome.html&lt;body&gt;&lt;div&gt; &lt;input type=&quot;text&quot; id=&quot;text1&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;changeSrc()&quot;&gt;&lt;/div&gt;&lt;iframe id=&quot;text2&quot; style=&quot;width: 1000px;height: 2000px&quot; src=&quot;http://www.autohome.com.cn&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function changeSrc() &#123; /* var cont = $(&apos;#text1&apos;).val(); $(&apos;#text2&apos;).attr(&apos;src&apos;,cont); */ var cont = document.getElementById(&apos;text1&apos;).value; document.getElementById(&apos;text2&apos;).src = cont &#125;&lt;/script&gt; 123456789101112131415161718192021# iframe + form 进行伪Ajax# views.pydef fake_ajax(request): if request.method == &apos;GET&apos;: return render(request,&apos;fake_ajax.html&apos;) else: print(&apos;post.ok&apos;) print(request.POST.get(&apos;user&apos;)) return HttpResponse(&apos;ok&apos;)# fake_ajax.html&lt;body&gt;&lt;input type=&quot;text&quot;&gt;&lt;form id=&quot;f1&quot; action=&quot;/fake_ajax/&quot; target=&quot;ifr&quot; method=&quot;post&quot;&gt; &lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt; &lt;input type=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt; 123456789101112131415161718192021222324252627282930313233# 加上伪造的&apos;回调函数&apos;# views.pydef fake_ajax(request): if request.method == &apos;GET&apos;: return render(request,&apos;fake_ajax.html&apos;) else: print(&apos;post.ok&apos;) content = request.POST.get(&apos;user&apos;) return HttpResponse(content)# fake_ajax.html&lt;body&gt;&lt;input type=&quot;text&quot;&gt;&lt;form id=&quot;f1&quot; action=&quot;/fake_ajax/&quot; target=&quot;ifr&quot; method=&quot;post&quot;&gt; &lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt; &lt;a onclick=&quot;submitForm()&quot;&gt;提交&lt;/a&gt;&lt;/form&gt;&lt;script&gt; function submitForm() &#123; document.getElementById(&apos;ifr&apos;).onload = loadIframe; document.getElementById(&apos;f1&apos;).submit(); &#125; function loadIframe() &#123; var content = document.getElementById(&apos;ifr&apos;).contentWindow.document.body.innerText; alert(content) &#125;&lt;/script&gt;&lt;/body&gt;","tags":[{"name":"前端","slug":"前端","permalink":"http://midsummer.com/tags/前端/"},{"name":"Ajax","slug":"Ajax","permalink":"http://midsummer.com/tags/Ajax/"}]},{"title":"线程池、进程池","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/线程池、进程池/","text":"线程池 12345678910111213import timefrom concurrent.futures import ThreadPoolExecutordef task(i): time.sleep(1) print(i)p = ThreadPoolExecutor(10)for row in range(100): p.submit(task,row) 进程池 1234567891011import timefrom concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutordef task(i): time.sleep(1) print(i)p = ProcessPoolExecutor(10)for row in range(100): p.submit(task,row)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"}]},{"title":"修复Bug，刷新无法动态显示数据库内容","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/修复Bug，刷新无法动态显示数据库内容/","text":"123456789101112131415161718修复Bug，刷新无法动态显示数据库内容： 方式一： class TeacherForm(Form): tname = fields.CharField(min_length=2) # xx = form_model.ModelMultipleChoiceField(queryset=models.Classes.objects.all()) # xx = form_model.ModelChoiceField(queryset=models.Classes.objects.all()) 方式二： class TeacherForm(Form): tname = fields.CharField(min_length=2) xx = fields.MultipleChoiceField( widget=widgets.SelectMultiple ) def __init__(self,*args,**kwargs): super(TeacherForm,self).__init__(*args,**kwargs) self.fields[&apos;xx&apos;].choices = models.Classes.objects.values_list(&apos;id&apos;,&apos;title&apos;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-CBV，FBV","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/CBV|FBV/","text":"urls.pyfrom django.conf.urls import urlfrom django.contrib import adminfrom cbv import viewsurlpatterns = [ url(r’^admin/‘, admin.site.urls), url(r’^Login.html$’, views.Login.as_view()),]123456789101112131415161718192021```# views.pyfrom django.views import Viewclass Login(View):&quot;&quot;&quot;&quot;get 查post 提交 创建put 更新delete 删除&quot;&quot;&quot;&quot; def get(self,request): return HttpResponse(&apos;Login...get&apos;) def post(self,request): user = request.POST.get(&apos;user&apos;) print(user) return HttpResponse(&apos;Login...post&apos;) dispatch 类似于装饰器的效果1234567891011121314151617181920212223# views.pyfrom django.shortcuts import render,redirect,HttpResponse# Create your views here.from django.views import Viewclass Login(View): def dispatch(self, request, *args, **kwargs): print(&apos;before&apos;) obj = super(Login,self).dispatch(request, *args, **kwargs) print(&apos;after&apos;) return obj def get(self,request): return HttpResponse(&apos;Login...get&apos;) def post(self,request): user = request.POST.get(&apos;user&apos;) print(user) return HttpResponse(&apos;Login...post&apos;) 给CBV加装饰器 ###在指定方法上装123456789101112131415161718192021222324252627282930313233from django.shortcuts import render,redirect,HttpResponse# Create your views here.from django.views import Viewfrom django.utils.decorators import method_decoratorimport timedef auth(func): def wrapper(*args,**kwargs): print(time.time()) return func(*args,**kwargs) return wrapperclass Login(View): def dispatch(self, request, *args, **kwargs): print(&apos;before&apos;) obj = super(Login,self).dispatch(request, *args, **kwargs) print(&apos;after&apos;) return obj @method_decorator(auth) def get(self,request): return HttpResponse(&apos;Login...get&apos;) @method_decorator(auth) def post(self,request): user = request.POST.get(&apos;user&apos;) print(user) return HttpResponse(&apos;Login...post&apos;) 在类上加12345678910111213141516171819202122232425262728293031323334from django.shortcuts import render,redirect,HttpResponse# Create your views here.from django.views import Viewfrom django.utils.decorators import method_decoratorimport timedef auth(func): def wrapper(*args,**kwargs): print(time.time()) return func(*args,**kwargs) return wrapper# @method_decorator(auth,name=&apos;get&apos;)@method_decorator(auth,name=&apos;dispatch&apos;)class Login(View): def dispatch(self, request, *args, **kwargs): print(&apos;before&apos;) obj = super(Login,self).dispatch(request, *args, **kwargs) print(&apos;after&apos;) return obj def get(self,request): return HttpResponse(&apos;Login...get&apos;) def post(self,request): user = request.POST.get(&apos;user&apos;) print(user) return HttpResponse(&apos;Login...post&apos;) *Django 中 的一个bug，csrf_protect装饰器只能在类上添加12345678910111213141516171819202122232425262728293031323334from django.shortcuts import render,redirect,HttpResponse# Create your views here.from django.views import Viewfrom django.utils.decorators import method_decoratorfrom django.views.decorators.csrf import csrf_exempt,csrf_protectimport timedef auth(func): def wrapper(*args,**kwargs): print(time.time()) return func(*args,**kwargs) return wrapper@method_decorator(csrf_protect,name=&apos;get&apos;)class Login(View): def dispatch(self, request, *args, **kwargs): print(&apos;before&apos;) obj = super(Login,self).dispatch(request, *args, **kwargs) print(&apos;after&apos;) return obj def get(self,request): return HttpResponse(&apos;Login...get&apos;) def post(self,request): user = request.POST.get(&apos;user&apos;) print(user) return HttpResponse(&apos;Login...post&apos;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-中间件01","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/Django-中间件01/","text":"django 中的中间件（middleware），在django中，中间件其实就是一个类，在请求到来和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法。请求过来，先经过所有的process_request(),到视图函数后，经过所有的process_response返回。 但是如果中某一个process_request()有了返回值，找到它自己所对应的process_respons()直接返回。 1.10版本之后都是这样的流程，之前的版本，如果process_request()有了返回值，会到最后一个process_respons()，然后返回 。###5个方法 process_request()、process_response()123456789101112131415161718192021222324252627282930313233343536373839404142# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# setting.pyMIDDLEWARE = [ &apos;django.middleware.security.SecurityMiddleware&apos;, .......... &apos;md.M1&apos;, &apos;md.M2&apos;,]# views.pydef test(request): print(&apos;ok&apos;) return HttpResponse(&apos;ok&apos;)# 输出结果m1.process_requestm2.process_requestokm2.process_responsem1.process_response process_view(),12345678910111213141516171819202122232425262728# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewokm2.process_responsem1.process_response 1234567891011121314151617181920212223242526272829# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewokm2.process_responsem1.process_response 123456789101112131415161718192021222324252627282930# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) response = callback(request,*callback_args, **callback_kwargs) return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return responseclass M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response# 输出结果m1.process_requestm2.process_requestm1.process_viewokm2.process_responsem1.process_response process_exception()123456789101112131415161718192021222324252627282930313233343536373839404142434445# views.py 在视图函数中添加错误进行测试def test(request): print(&apos;ok&apos;) int(&apos;test&apos;) return HttpResponse(&apos;ok&apos;)# md.pyfrom django.utils.deprecation import MiddlewareMixinclass M1(MiddlewareMixin): def process_request(self,request): print(&apos;m1.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m1.process_view&apos;) # response = callback(request,*callback_args, **callback_kwargs) # return response def process_response(self,request,response): print(&apos;m1.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m1.process_exception&apos;)class M2(MiddlewareMixin): def process_request(self, request): print(&apos;m2.process_request&apos;) def process_view(self, request, callback, callback_args, callback_kwargs): print(&apos;m2.process_view&apos;) def process_response(self, request, response): print(&apos;m2.process_response&apos;) return response def process_exception(self, request, exception): print(&apos;m2.process_exception&apos;)# 输出结果m1.process_requestm2.process_requestm1.process_viewm2.process_viewokm2.process_exceptionm1.process_exceptionm2.process_responsem1.process_response","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"JSONP详解","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/JSONP详解/","text":"同源策略 限制：Ajax 向别的网站发Ajax请求，在拿回数据的时候，已经在拿回来的时候，发送给浏览器，浏览器阻止了，请求已经发送给服务器并执行了 不限制：有src属性的，如script 标签 但是在开发过程中有这样的需求：向其他网站发送Http请求。 浏览器直接发送请求【考虑同源】 浏览器-&gt; 服务端 -&gt; 发送请求 浏览器直接发送请求【考虑同源】 12345678910111213141516171819202122232425262728293031323334353637383940414243# jsonp.html&lt;body&gt;&lt;input type=&quot;button&quot; value=&quot;获取用户列表&quot; onclick=&quot;getUsers();&quot; /&gt;&lt;ul id=&quot;user_lsit&quot;&gt;&lt;/ul&gt;&lt;script&gt;// Ajax 请求有限制，同源策略 /* function getUsers() &#123; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; if(xhr.readyState == 4)&#123; var content = xhr.responseText; console.log(content) &#125; &#125;; xhr.open(&apos;GET&apos;,&apos;http://www.s4.com:8001/users/?callback=bbb&apos;); xhr.send(); &#125; function bbb(arg) &#123; console.log(arg) &#125; */// jsonp function getUsers() &#123; var tag = document.createElement(&apos;script&apos;); tag.src = &apos;http://www.s4.com:8001/users/?callback=bbb&apos;; document.head.appendChild(tag); &#125; function bbb(arg) &#123; console.log(arg) &#125;&lt;/script&gt;&lt;/body&gt; 1234567891011121314# 请求目标网站# veiws.pydef users(request): funcname = request.GET.get(&apos;callback&apos;) print(&apos;请求来了&apos;) user_list = [ &apos;summer&apos;,&apos;spring&apos;,&apos;autumn&apos; ] user_list_str = json.dumps(user_list) temp = &apos;%s(%s)&apos; % (funcname,user_list_str) print(temp) return HttpResponse(temp) jsonp要求： 1.客户端 tag.src = ‘http://www.s4.com:8001/users/?callback=bbb‘; function bbb(arg) { console.log(arg) } 2.服务端 获取 funcname = request.GET.get(‘callback’) 返回 funcname(数据) 用jQuery Ajax 来发送请求123456789101112131415161718192021222324252627&lt;body&gt;&lt;input type=&quot;button&quot; value=&quot;获取用户列表&quot; onclick=&quot;getUsers();&quot; /&gt;&lt;ul id=&quot;user_lsit&quot;&gt;&lt;/ul&gt;&lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function getUsers() &#123; $.ajax(&#123; url: &apos;http://www.s4.com:8001/users/&apos;, type: &apos;GET&apos;, // 改用jsonp去发，改下面几个参数，原用XMLHttpRequest。 dataType: &apos;JSONP&apos;, jsonp: &apos;callback&apos;, jsonpCallback: &apos;bbb&apos; &#125;) &#125; function bbb(arg) &#123; console.log(arg) &#125;&lt;/script&gt;&lt;/body&gt; 使用123456789101112131415161718192021使用： 1. 自己写动态创建script function getUsers()&#123; var tag = document.createElement(&apos;script&apos;); tag.src = &quot;http://www.s4.com:8001/users/?callback=bbb&quot;; document.head.appendChild(tag); &#125; 2. jQuery $.ajax(&#123; url: &apos;http://www.s4.com:8001/users/&apos;, type: &apos;GET&apos;, dataType: &apos;JSONP&apos;, jsonp: &apos;funcname&apos;, jsonpCallback: &apos;bbb&apos; &#125;) 其他： - 只能发GET请求 - 约定，客户端服务端制定好规则 JSONP是一种技术，一种方式，目的解决跨域问题","tags":[{"name":"前端","slug":"前端","permalink":"http://midsummer.com/tags/前端/"}]},{"title":"Ajax02 上传文件","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/Ajax02/","text":"Ajax 上传文件 原生Ajax JQuery Ajax 伪造Ajax上传 原生Ajax12345678910111213141516171819202122232425262728293031323334353637383940414243444546# views.pydef upload(request): if request.method == &apos;GET&apos;: return render(request,&apos;upload.html&apos;) else: print(request.POST,request.FILES) file_obj = request.FILES.get(&apos;fafafa&apos;) import os file_path = os.path.join(&apos;static&apos;,file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) return HttpResponse(file_path)# upload.html&lt;body&gt; &lt;h3&gt;原生Ajax上传文件&lt;/h3&gt; &lt;input type=&quot;file&quot; id=&quot;il1&quot;&gt; &lt;a onclick=&quot;upload1();&quot;&gt;上传&lt;/a&gt; &lt;div id=&quot;content&quot;&gt;&lt;/div&gt; &lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; function upload1() &#123; var formData = new FormData(); formData.append(&apos;k1&apos;,&apos;v1&apos;); formData.append(&apos;fafafa&apos;,document.getElementById(&apos;il1&apos;).files[0]); var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; if(xhr.readyState == 4)&#123; var file_path = xhr.responseText; alert(file_path) var tag = document.createElement(&apos;img&apos;); tag.src = &apos;/&apos; + file_path; document.getElementById(&apos;content&apos;).appendChild(tag) &#125; &#125;; xhr.open(&apos;POST&apos;,&apos;/upload/&apos;);&#123;# xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);#&#125; // 如果send的是传formData对象就不用加这条，后台会对数据进行处理 xhr.send(formData); &#125; &lt;/script&gt;&lt;/body&gt; JQuery Ajax12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# views.pydef upload(request): if request.method == &apos;GET&apos;: return render(request,&apos;upload.html&apos;) else: print(request.POST,request.FILES) file_obj = request.FILES.get(&apos;fafafa&apos;) import os file_path = os.path.join(&apos;static&apos;,file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) return HttpResponse(file_path)# upload.html&lt;body&gt; &lt;h3&gt;jQuery Ajax上传文件&lt;/h3&gt; &lt;input type=&quot;file&quot; id=&quot;il2&quot;&gt; &lt;a onclick=&quot;upload2();&quot;&gt;上传&lt;/a&gt; &lt;div id=&quot;content2&quot;&gt;&lt;/div&gt; &lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; function upload2() &#123; var formData = new FormData(); formData.append(&apos;k1&apos;,&apos;v1&apos;); formData.append(&apos;fafafa&apos;,$(&apos;#il2&apos;)[0].files[0]); $.ajax(&#123; url: &apos;/upload/&apos;, type: &apos;POST&apos;, data: formData, contentType: false, processData: false, // 告知jQuery不要加那些请求头对数据进行处理，把原生的formData传过去 success:function (arg) &#123; alert(arg); var tag = document.createElement(&apos;img&apos;); tag.src = &apos;/&apos; + arg; document.getElementById(&apos;content&apos;).appendChild(tag) &#125; &#125;) &#125; &lt;/script&gt;&lt;/body&gt; 伪造Ajax上传 之前两种 都要依赖FormData对象进行操作，虽然好用，但兼容性稍微差点，在html5之后提出的对象，现在主流的浏览器都支持，ie10以上才能用，其他更老的浏览器就不支持FormData对象，这时候就要用伪造Ajax上传，兼容性好。 123456789101112131415161718192021222324252627282930313233343536373839404142434445# views.pydef upload(request): if request.method == &apos;GET&apos;: return render(request,&apos;upload.html&apos;) else: print(request.POST,request.FILES) file_obj = request.FILES.get(&apos;fafafa&apos;) import os file_path = os.path.join(&apos;static&apos;,file_obj.name) with open(file_path,&apos;wb&apos;) as f: for chunk in file_obj.chunks(): f.write(chunk) return HttpResponse(file_path)# upload.html&lt;body&gt; &lt;h3&gt;伪 Ajax上传文件&lt;/h3&gt; &lt;form id=&quot;f1&quot; action=&quot;/upload/&quot; target=&quot;ifr&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;iframe id=&quot;ifr&quot; name=&quot;ifr&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt; &lt;input type=&quot;file&quot; name=&quot;fafafa&quot; /&gt; &lt;a onclick=&quot;upload3();&quot;&gt;提交&lt;/a&gt; &lt;/form&gt; &lt;div id=&quot;content3&quot;&gt;&lt;/div&gt; &lt;script src=&quot;/static/jquery-3.2.1.js&quot;&gt;&lt;/script&gt; function upload3() &#123; document.getElementById(&apos;ifr&apos;).onload = loadIframe; document.getElementById(&apos;f1&apos;).submit(); &#125; function loadIframe() &#123; var content = document.getElementById(&apos;ifr&apos;).contentWindow.document.body.innerText; alert(content); var tag = document.createElement(&apos;img&apos;); tag.src = &apos;/&apos; + content; document.getElementById(&apos;content&apos;).appendChild(tag) &#125;&lt;/body&gt;","tags":[{"name":"前端","slug":"前端","permalink":"http://midsummer.com/tags/前端/"},{"name":"Ajax","slug":"Ajax","permalink":"http://midsummer.com/tags/Ajax/"}]},{"title":"Form组件","date":"2016-11-09T00:31:27.000Z","path":"2016/11/09/From组件/","text":"Django 提供的Form组件 Form 验证123456789# login.html&lt;body&gt;&lt;form action=&quot;/login.html&quot; method=&quot;POST&quot;&gt; &#123;% csrf_token %&#125; &lt;p&gt;姓名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&#123;&#123; obj.errors.username.0 &#125;&#125;&lt;/p&gt; &lt;p&gt;密码：&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&#123;&#123; obj.errors.password.0 &#125;&#125;&lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142# views.pyfrom django.shortcuts import render,redirect,HttpResponsefrom django.forms import Formfrom django.forms import fieldsclass LoginForm(Form): username = fields.CharField( max_length=32, min_length=4, required=True, error_messages=&#123; &apos;max_length&apos;:&apos;最大长度为32&apos;, &apos;min_length&apos;:&apos;最小长度为4&apos;, &apos;required&apos;:&apos;不能为空&apos; &#125; ) password = fields.CharField( min_length=6, required=True, error_messages=&#123; &apos;min_length&apos;:&apos;最小长度为6&apos;, &apos;required&apos;: &apos;不能为空&apos; &#125; )def login(request): if request.method == &apos;GET&apos;: return render(request,&apos;login.html&apos;) else: obj = LoginForm(request.POST) if obj.is_valid(): print(&apos;正确&apos;) print(obj.cleaned_data) # 出来的是字典类型 &#123;&apos;username&apos;: &apos;summer&apos;, &apos;password&apos;: &apos;123456&apos;&#125; return HttpResponse(&apos;登陆成功！&apos;) else: print(&apos;错误&apos;) # print(obj.errors[&apos;username&apos;][0]) # print(obj.errors[&apos;password&apos;][0]) return render(request, &apos;login.html&apos;,&#123;&apos;obj&apos;:obj&#125;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-ORM进阶操作02","date":"2016-11-08T23:31:27.000Z","path":"2016/11/09/Django-ORM进阶操作02/","text":"select_related() 查询主动做连表 123456789101112131415161718q = models.UserInfo.objects.all().filter(id__lt=60)# for row in q:# print(row.id,row.name,row.ut.title)# 这样进行查询性能不好，需要重新发sql请求在进行查询另外一张表中的数据，如果有10条数据就要进行11次查询q = models.UserInfo.objects.all().values(&apos;name&apos;,&apos;id&apos;,&apos;ut__title&apos;).filter(id__lt=60)# for i in q:# print(i[&apos;name&apos;],i[&apos;ut__title&apos;])# 这样 进行了 优化 不回重复发送sql请求，到的结果内是字典q = models.UserInfo.objects.all().select_related(&apos;ut&apos;).filter(id__lt=60)print(q.query)# for row in q:# print(row.id,row.name,row.ut.title)# select_related(&apos;ut&apos;) 相当 于 inner join 先连成一张表再进行查询 prefetch_related() 不做连表，做多次查询 12345 q = models.UserInfo.objects.all().prefetch_related(&apos;ut&apos;).filter(id__lt=60) for row in q: print(row.id,row.name,row.ut.title)# 如果查询的数据比较多，查询的次数比较多就不建议用select_related进行连表查询，毕竟连表查询毕竟有损耗。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212# distinct()v = models.UserInfo.objects.values(&apos;age&apos;).distinct()for item in v: print(item)# 在mysql,sqlite中distinct()括号里是不能传参数，# select distinct nid from userinfo;# 而在 PostgreSQL 中# models.UserInfo.objects.distinct(&apos;nid&apos;)# reverse()v = models.UserInfo.objects.all().order_by(&apos;id&apos;).reverse()# reverse() 必须在order_by()后使用不能单独使用。for i in v: print(i.id)v = models.UserInfo.objects.all().order_by(&apos;-id&apos;,&apos;name&apos;).reverse()# 相当于order_by(&apos;id&apos;,&apos;-name&apos;)# only()v = models.UserInfo.objects.all()# [obj]v = models.UserInfo.objects.all().only(&apos;id&apos;,&apos;name&apos;)# [obj]for obj in v: print(obj.name,obj.id,obj.age) # 虽然加里only(),但是还能取出其他数据，但是不要这么取，会在再区表中进行查询影响效率,写几个取几个，不要多取v = models.UserInfo.objects.values(&apos;id&apos;,&apos;name&apos;).all()# [&#123;id,name&#125;]for i in v: print(i)# defer()# defer() 和only()相反，取括号内以外的数据# using()# 指定数据库# models.UserInfo.objects.all().using(&apos;db2&apos;)# setting.py&apos;&apos;&apos;DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;, &apos;db2&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;db2&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;&apos;, &apos;HOST&apos;: &apos;&apos;, &apos;PORT&apos;: &apos;&apos;, &#125;&#125;&apos;&apos;&apos;# dates() # # 根据时间进行某一部分进行去重查找并截取指定内容 # # kind只能是：&quot;year&quot;（年）, &quot;month&quot;（年-月）, &quot;day&quot;（年-月-日） # # order只能是：&quot;ASC&quot; &quot;DESC&quot; # # 并获取转换后的时间 # - year: 年 - 01 - 01 # - month: 年 - 月 - 01 # - day: 年 - 月 - 日# models.DatePlus.objects.dates(&apos;ctime&apos;, &apos;day&apos;, &apos;DESC&apos;)# datetimes() # 根据时间进行某一部分进行去重查找并截取指定内容，将时间转换为指定时区时间 # kind只能是 &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot; # order只能是：&quot;ASC&quot; &quot;DESC&quot; # tzinfo时区对象 # models.DDD.objects.datetimes(&apos;ctime&apos;, &apos;hour&apos;, tzinfo=pytz.UTC) # models.DDD.objects.datetimes(&apos;ctime&apos;, &apos;hour&apos;, tzinfo=pytz.timezone(&apos;Asia/Shanghai&apos;))&apos;&apos;&apos; pip3 install pytz import pytz pytz.all_timezones pytz.timezone(‘Asia/Shanghai’)&apos;&apos;&apos;# none()# 取空v = models.UserInfo.objects.none()print(v)# aggregate()from django.db.models import Count,Avg,Max# 聚合整张表result = models.UserInfo.objects.aggregate(k=Count(&apos;id&apos;), n=Count(&apos;age&apos;))result = models.UserInfo.objects.aggregate(k=Count(&apos;id&apos;),n=Count(&apos;age&apos;,distinct=True))print(result)# count()# 计算个数# get()v = models.UserInfo.objects.all().first()v = models.UserInfo.objects.get(id=1) # 如果id=1 不存在 则会报错,找到多个也会报错# create()obj = models.UserInfo.objects.create(name=&apos;summer&apos;,age=23,pwd = &apos;ab456&apos;)# obj = models.UserInfo.objects.create(**&#123;&apos;name&apos;:&apos;summer&apos;,&apos;age&apos;:123,&apos;pwd&apos;:&apos;ab456&apos;&#125;)print(obj.id) # 可以获取添加数据的自增ID# 另外一种添加方法obj = models.UserInfo(name=&apos;autumn&apos;,age=23,pwd=&apos;ab123&apos;)obj.save()# bulk_create() 批量添加objs = [ models.UserInfo(name=&apos;autumn&apos;,age=23,pwd=&apos;ab123&apos;), models.UserInfo(name=&apos;autumn1&apos;, age=23, pwd=&apos;ab123&apos;)]models.UserInfo.objects.bulk_create(objs,10) # 10 代表一次提交10个对象 这个数最多别超过999# get_or_create() 如果纯在则获取，否者创建obj, created = models.UserInfo.objects.get_or_create(name=&apos;summer1&apos;, defaults=&#123;&apos;age&apos;:123,&apos;pwd&apos;:&apos;ab456&apos;&#125;)# 先根据条件去查，如果存在name=&apos;summer1&apos;，则后面的default无效不执行。print(obj,created) # created 为True或False# update_or_create() 如果存在，则更新，否则，创建obj, created = models.UserInfo.objects.update_or_create(name=&apos;summer1&apos;, defaults=&#123;&apos;age&apos;:123,&apos;pwd&apos;:&apos;ab456&apos;&#125;)print(obj,created)# exists()# 检查查询结果是否存在，返回True或Falseresult = models.UserInfo.objects.filter(id=1111).exists()print(result)# in_bulk# 根据主键进行查询。res = models.UserInfo.objects.in_bulk([1,2,3])# 相当于res2 = models.UserInfo.objects.filter(id__in=[1,2,3])# 如果需要的sql语句Django这个没有提供，可以用下面3中方法解决# extra# 原生sql# raw# rawres = models.UserInfo.objects.raw(&apos;select id,name,age from app01_userinfo where id &lt; 10&apos;)for item in res: print(item.age,item.name)# 为原生SQL设置参数models.UserInfo.objects.raw(&apos;select id as nid from userinfo where nid&gt;%s&apos;, params=[12,])# 将获取的到列名转换为指定列名name_map = &#123;&apos;age&apos;: &apos;new_age&apos;, &apos;name&apos;: &apos;new_name&apos;&#125;r = models.UserInfo.objects.raw(&apos;SELECT * FROM app01_userinfo&apos;, translations=name_map)for i in r: print(i.new_age)# 指定数据库# models.UserInfo.objects.raw(&apos;select * from userinfo&apos;, using=&quot;default&quot;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-ORM进阶操作01","date":"2016-11-08T01:31:27.000Z","path":"2016/11/08/Django-ORM进阶操作01/","text":"1.增删改查 2.一般操作: 123456789models.UserInfo.objects.filter(id__gt=1)models.UserInfo.objects.filter(id__lt=1)models.UserInfo.objects.filter(id__lte=1)models.UserInfo.objects.filter(id__gte=1)models.UserInfo.objects.filter(id__in=[1,2,3])models.UserInfo.objects.filter(id__range=[1,2])models.UserInfo.objects.filter(name__startswith=&apos;au&apos;)models.UserInfo.objects.filter(name__contains=&apos;au&apos;) # 包含models.UserInfo.objects.exclude(id=1) # 排除，除去括号内的条件之外的内容。 3.排序:12345user_object_list = models.UserInfo.objects.all().order_by(&apos;id&apos;) # ascuser_object_list = models.UserInfo.objects.all().order_by(&apos;-id&apos;) # descuser_object_list = models.UserInfo.objects.all().order_by(&apos;-id&apos;,&apos;name&apos;) # 如果遇到id相等 按name从小到大排序 4.分组:123456789101112from django.db.models import Countv = models.UserInfo.objects.values(&apos;ut_id&apos;).annotate(aa = Count(&apos;id&apos;))print(v.query)# SELECT &quot;app01_userinfo&quot;.&quot;ut_id&quot;, COUNT(&quot;app01_userinfo&quot;.&quot;id&quot;) AS &quot;aa&quot; FROM &quot;app01_userinfo&quot; GROUP BY &quot;app01_userinfo&quot;.&quot;ut_id&quot;for item in v: print(item)v = models.UserInfo.objects.values(&apos;ut_id&apos;).annotate(aa = Count(&apos;id&apos;)).filter(aa__gte=2)v = models.UserInfo.objects.filter(id__gt=2).values(&apos;ut_id&apos;).annotate(aa = Count(&apos;id&apos;)).filter(aa__gte=2)# filter()放在前面相等于where 放在annotate后相当于having 5.F，Q，extra 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 # F 更新时获取原变量数值 from django.db.models import F,Q models.UserInfo.objects.all().update(age=F(&apos;age&apos;)+1) user_List = models.UserInfo.objects.filter(id__lt=20).values(&apos;age&apos;) for row in user_List: print(row[&apos;age&apos;]) from django.db.models import Qmodels.UserInfo.objects.filter(id=1,name=&apos;spring&apos;) condition = &#123; &apos;id&apos;:1, &apos;name&apos;:&apos;spring&apos;, &#125; v = models.UserInfo.objects.filter(**condition) from django.db.models import Q# Q 用于构造复杂的查询条件 # Q 的第一种写法 models.UserInfo.objects.filter(Q(id=1)) models.UserInfo.objects.filter(Q(id=1) | Q(id=2)) models.UserInfo.objects.filter(Q(id=3) &amp; Q(id=4)) # Q 的第二种写法 q1 = Q() q1.connector = &apos;OR&apos; q1.children.append((&apos;id&apos;,1)) q1.children.append((&apos;id&apos;,10)) q1.children.append((&apos;id&apos;,9)) q2 = Q() q2.connector = &apos;OR&apos; q2.children.append((&apos;ut_id&apos;,1)) q2.children.append((&apos;ut_id&apos;,2)) con = Q() con.add(q1,&apos;AND&apos;) con.add(q2,&apos;AND&apos;)# extra 额外条件查询以及相关表，排序 v = models.UserInfo.objects.all().extra(select=&#123;&apos;n&apos;:&apos;select count(1) from app01_userinfo&apos;&#125;) v = models.UserInfo.objects.all().extra(select=&#123;&apos;n&apos;:&apos;select count(1) from app01_userinfo WHERE id &gt; 100&apos;&#125;) v = models.UserInfo.objects.all().extra(select=&#123;&apos;n&apos;:&apos;select count(1) from app01_userinfo WHERE id &gt; %s&apos;&#125;,select_params=[100,]) v = models.UserInfo.objects.all().extra(select=&#123;&apos;n&apos;:&apos;select count(1) from app01_userinfo WHERE id = %s or id = %s&apos; &#125;,select_params=[100,201]) v = models.UserInfo.objects.all().extra(select=&#123; &apos;n&apos;:&apos;select count(1) from app01_userinfo WHERE id = %s or id = %s&apos; , &apos;m&apos;:&apos;select count(1) from app01_userinfo WHERE id = %s or id = %s&apos; , &#125;, select_params=[3,4,100,201]) v = models.UserInfo.objects.extra( where=[&apos;id=%s or id=2&apos;,&apos;name=%s&apos;], params=[1,&apos;summer&apos;], order_by=[&apos;-id&apos;] ) v = models.UserInfo.objects.extra( tables=[&apos;app01_usertype&apos;], # 笛卡尔基 where=[&apos;app01_usertype.id = app01_userinfo.ut_id&apos;] ) 原生SQL语句 12345678910111213141516171819202122232425262728setting.pyDATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;, &apos;db2&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;db2&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;&apos;, &apos;HOST&apos;: &apos;&apos;, &apos;PORT&apos;: &apos;&apos;, &#125;&#125; # 原生 SQL语句 from django.db import connection,connections cursor = connection.cursor() # 用默认default的数据库 cursor = connections[&apos;db2&apos;].cursor() # 使用db2 数据库 cursor.execute(&apos;select * from app01_userinfo WHERE id = %s&apos;,[1,]) row = cursor.fetchone()","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django基础-ORM基本操作","date":"2016-10-09T00:31:27.000Z","path":"2016/10/09/Django基础-ORM基本操作/","text":"####ORM操作 ORM：操作表： 创建表 修改表( 在SQLAchemy中不能进行修改表操作) 删除表 ORM：操作数据行： 增删改查 配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647481. 创建数据库2. 配置 修改 settings.pyDATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;:&apos;dbname&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;xxx&apos;, &apos;HOST&apos;: &apos;&apos;, &apos;PORT&apos;: &apos;&apos;, &#125;# 由于Django内部连接MySQL时使用的是MySQLdb模块，而python3中还无此模块，所以需要使用pymysql来代替# 如下设置放置的与project同名的配置的 __init__.py文件中3. import pymysql pymysql.install_as_MySQLdb() 4.创建类from django.db import modelsclass UserInfo(models.Model): nid = models.BigAutoField(primary_key=True) # 如果不写 Django默认添加一列自增列 username = models.CharField(max_length=32) password = models.CharField(max_length=64)5.在setting.py 里注册app INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01&apos;,]6. 创建数据库表 python manage.py makemigrations python manage.py migratepython manage.py makemigrations: 读取类的信息，在migations文件夹里生成配置文件。python manage.py migrate: 拿着makemigrations生成的配置文件去生成数据库表的语句。 12345678910111213141516171819# 增加新的一列class UserInfo(models.Model): nid = models.BigAutoField(primary_key=True) username = models.CharField(max_length=32) password = models.CharField(max_length=64) age = models.IntegerField() # 增加的一列➜ task003 git:(master) ✗ python3 manage.py makemigrationsYou are trying to add a non-nullable field &apos;age&apos; to userinfo without a default; we can&apos;t do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.pySelect an option:***新增加的一列要么 指定为空 要么 指定一个默认值 age = models.IntegerField(default=1) # age = models.IntegerField(null=True) 123456789101112131415# 创建外键from django.db import modelsclass UserGroup(models.Model): title = models.CharField(max_length=32)class UserInfo(models.Model): nid = models.BigAutoField(primary_key=True) username = models.CharField(max_length=32) password = models.CharField(max_length=64) age = models.IntegerField(default=1) ug = models.ForeignKey(&apos;UserGroup&apos;,null=True) # 在数据库中 ug 这一列的名字 叫 ug_id 数据库行相关操作:12345678910111213141516171819202122232425262728293031323334# 添加def index2(request): from app01 import models models.UserGroup.objects.create(title=&apos;销售部&apos;) models.UserInfo.objects.create( username=&apos;winter&apos;, password=&apos;ab123456&apos;, age=22, ug_id =1 ) return HttpResponse(&apos;ok&apos;)# 查找def index2(request): from app01 import models group_list = models.UserGroup.objects.all() # group_list = models.UserGroup.objects.filter(id=1) # filter 相当于sql语句中的where print(group_list) for row in group_list: print(row.id,row.title) return render(request,&apos;index2.html&apos;,&#123;&apos;group_list&apos;:group_list&#125;) # 神奇的双下划线 group_list = models.UserGroup.objects.filter(id=1) group_list = models.UserGroup.objects.filter(id=1).first() group_list = models.UserGroup.objects.filter(id__gt=1) # 大于 group_list = models.UserGroup.objects.filter(id__lt=1) # 小于# 删除 models.UserInfo.objects.filter(nid=1).delete()# 更新 models.UserGroup.objects.filter(nid=1).update(title=&apos;技术部门&apos;) 123456789101112131415161718192021222324252627# models.pyclass UserType(models.Model): title = models.CharField(max_length=32)class UserInfo(models.Model): name = models.CharField(max_length=32) age = models.IntegerField() ut = models.ForeignKey(&apos;UserType&apos;) # 正向操作 # result = models.UserInfo.objects.all() # for row in result: # print(row.id,row.name,row.ut.title) # 反向操作 obj = models.UserType.objects.all().first() print(obj.title) print(&apos;-----&apos;) for row in obj.userinfo_set.all(): print(row.name,row.age) return HttpResponse(&apos;ok&apos;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-模版","date":"2016-10-09T00:31:27.000Z","path":"2016/10/09/Django-模版/","text":"基本使用 母版 导入include 函数 - &gt; 不用加() 自动执行 模版自定义函数： simple_filter 最多两个参数 simple_tag 参数个数限制 simple_filter 可以做条件判断，simple_tag不行 母版 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# menu.html 母版&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h3&gt;这是一个组件&lt;/h3&gt; &lt;div class=&quot;title&quot;&gt;标题：&lt;/div&gt; &#123;% block xx %&#125;&#123;% endblock %&#125; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;# test.html&#123;% extends &apos;menu.html&apos; %&#125;&#123;% block xx %&#125; &lt;p&gt;hello!!&lt;/p&gt;&#123;% endblock %&#125;# 一般写3个block:css一个，内容一个，js一个&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &#123;% block css %&#125;&#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h3&gt;这是一个组件&lt;/h3&gt; &lt;div class=&quot;title&quot;&gt;标题：&lt;/div&gt; &#123;% block xx %&#125;&#123;% endblock %&#125; &lt;/div&gt; &#123;% block js %&#125;&#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; include12345678910111213141516171819# views.pydef test(request): return render(request,&apos;test.html&apos;,&#123; &apos;name2&apos;:&apos;autumn&apos; &#125;)# pub.html&lt;div&gt; &lt;h3&gt;这是一个组件&lt;/h3&gt; &lt;div class=&quot;title&quot;&gt;标题：&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;内容:&#123;&#123; name2 &#125;&#125;&lt;/div&gt;&lt;/div&gt;# test.html&lt;body&gt; &#123;% include &apos;pub.html&apos; %&#125; &lt;p&gt;-------&lt;/p&gt; &#123;% include &apos;pub.html&apos; %&#125;&lt;/body&gt; 模版自定义函数：123456789101112131415161718192021222324252627282930313233# views.pydef test(request): return render(request,&apos;test.html&apos;,&#123; &apos;userinfo&apos;:&#123;&apos;name&apos;:&apos;summer&apos;,&apos;age&apos;:23,&apos;sex&apos;:&apos;man&apos;&#125;, &apos;name2&apos;:&apos;autumn&apos; &#125;)# /app01/templatetags/xx.pyfrom django import templateregister = template.Library()@register.filterdef my_upper(value): return value.upper()# simple_filter 只能最多传2个参数@register.filterdef my_upper2(value,arg): return value + arg# simple_tag 没有参数限制@register.simple_tagdef my_upper3(value,arg1,arg2,arg3): return value + arg1 + arg2 + arg3# simple_filter 可以做条件判断，simple_tag不行@register.filterdef my_bool(value): return False 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# test.html&#123;% load xx %&#125;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &#123;% for i in userinfo %&#125; &lt;li&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;ul&gt; &#123;% for key in userinfo.keys %&#125; &lt;li&gt;&#123;&#123; key &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;ul&gt; &#123;% for value in userinfo.values %&#125; &lt;li&gt;&#123;&#123; value &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;ul&gt; &#123;% for k,v in userinfo.items %&#125; &lt;li&gt;&#123;&#123; k &#125;&#125;--&#123;&#123; v &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;p&gt;&#123;&#123; name2|upper &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; name2|my_upper &#125;&#125;&lt;/p&gt; // simple_filter &lt;p&gt;&#123;&#123; name2|my_upper2:&apos; hello!&apos; &#125;&#125;&lt;/p&gt; // simple_tag &lt;p&gt;&#123;% my_upper3 name2 &apos;ddd&apos; &apos;hello!&apos; &apos;autumn&apos; %&#125;&lt;/p&gt; // simple_filter &#123;% if name2|my_bool %&#125; &lt;h3&gt;真&lt;/h3&gt; &#123;% else %&#125; &lt;h3&gt;假&lt;/h3&gt; &#123;% endif %&#125;&lt;/body&gt;&lt;/html&gt; 自定义simple_tag 过程 a、在app中创建templatetags模块 b、创建任意 .py 文件，如：xx.py 123456789101112131415#!/usr/bin/env python#coding:utf-8from django import templatefrom django.utils.safestring import mark_saferegister = template.Library()@register.simple_tagdef my_simple_time(v1,v2,v3): return v1 + v2 + v3@register.simple_tagdef my_input(id,arg): result = &quot;&lt;input type=&apos;text&apos; id=&apos;%s&apos; class=&apos;%s&apos; /&gt;&quot; %(id,arg,) return mark_safe(result) c、在使用自定义simple_tag的html文件中导入之前创建的 xx.py 文件名 1&#123;% load xx %&#125; d、使用simple_tag 12&#123;% my_simple_time 1 2 3%&#125;&#123;% my_input &apos;id_username&apos; &apos;hide&apos;%&#125; e、在settings中配置当前app，不然django无法找到自定义的simple_tag 123456789INSTALLED_APPS = ( &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;app01&apos;,)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Django-内置分页","date":"2016-10-09T00:31:27.000Z","path":"2016/10/09/Django-内置分页/","text":"123456789101112131415161718192021222324252627282930def test(request): from django.core.paginator import Paginator, Page current_page = request.GET.get(&apos;page&apos;) user_list = models.UserInfo.objects.all() paginator = Paginator(user_list, 10) # per_page: 每页显示条目数量 # count: 数据总个数 # num_pages:总页数 # page_range:总页数的索引范围，如: (1,10),(1,200) # page: page对象 try: posts = paginator.page(current_page) except Exception as e: posts = paginator.page(1) # has_next 是否有下一页 # next_page_number 下一页页码 # has_previous 是否有上一页 # previous_page_number 上一页页码 # object_list 分页之后的数据列表 # number 当前页 # paginator paginator对象 return render(request, &apos;test.html&apos;, &#123;&apos;posts&apos;: posts&#125;) 1234567891011121314151617181920212223242526# test.html&lt;body&gt;&lt;ul&gt; &#123;% for row in posts.object_list %&#125; &lt;li&gt;&#123;&#123; row.id &#125;&#125; - &#123;&#123; row.name &#125;&#125; - &#123;&#123; row.ut.title &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125;&lt;/ul&gt;&#123;% if posts.has_previous %&#125; &lt;a href=&quot;/test/?page=&#123;&#123; posts.previous_page_number &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&#123;% endif %&#125;&#123;% for num in posts.paginator.page_range %&#125; &lt;a href=&quot;/test/?page=&#123;&#123; num &#125;&#125;&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/a&gt;&#123;% endfor %&#125;&#123;% if posts.has_next %&#125; &lt;a href=&quot;/test/?page=&#123;&#123; posts.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&#123;% endif %&#125;&lt;/body&gt; Djnago内置的分页 具有局限性, 默认 只能 显示全部页码,只适用于 上一页下一页。","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Form 文件上传","date":"2016-09-19T00:31:27.000Z","path":"2016/09/19/Form 文件上传/","text":"12345678910111213141516171819202122232425262728293031# upload_file.html&lt;body&gt;&lt;form action=&quot;/upload_file/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;file&quot; name=&quot;fafafa&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;&lt;/form&gt;&lt;/body&gt;# views.pydef upload_file(request): if request.method == &apos;GET&apos;: return render(request,&apos;upload_file.html&apos;) else: print(request.FILES) print(request.FILES.get(&apos;fafafa&apos;)) file_obj = request.FILES.get(&apos;fafafa&apos;) print(file_obj.name) print(file_obj.size) f = open(os.path.join(&apos;static&apos;,file_obj.name),&apos;wb&apos;) for chunk in file_obj.chunks(): f.write(chunk) f.close() return render(request, &apos;upload_file.html&apos;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Form select 框","date":"2016-09-19T00:31:27.000Z","path":"2016/09/19/Form select 框/","text":"123456789101112131415161718192021Select框：单选 cls_id = fields.IntegerField( # widget=widgets.Select(choices=[(1,&apos;上海&apos;),(2,&apos;北京&apos;)]) widget=widgets.Select(choices=models.Classes.objects.values_list(&apos;id&apos;,&apos;title&apos;),attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) ) cls_id = fields.ChoiceField( choices=models.Classes.objects.values_list(&apos;id&apos;,&apos;title&apos;), widget=widgets.Select(attrs=&#123;&apos;class&apos;: &apos;form-control&apos;&#125;) ) obj = FooForm(&#123;&apos;cls_id&apos;:1&#125;)多选 xx = fields.MultipleChoiceField( choices=models.Classes.objects.values_list(&apos;id&apos;,&apos;title&apos;), widget=widgets.SelectMultiple ) obj = FooForm(&#123;&apos;cls_id&apos;:[1,2,3]&#125;)","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"Form 验证之钩子","date":"2016-09-09T00:31:27.000Z","path":"2016/09/09/Form 验证之钩子/","text":"12345678910111213141516171819202122# From验证源码def _clean_fields(self): for name, field in self.fields.items(): # value_from_datadict() gets the data from the data dictionaries. # Each widget type knows how to retrieve its own data, because some # widgets split data over several HTML fields. if field.disabled: value = self.get_initial_for_field(field, name) else: value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name)) try: if isinstance(field, FileField): initial = self.get_initial_for_field(field, name) value = field.clean(value, initial) else: value = field.clean(value) self.cleaned_data[name] = value if hasattr(self, &apos;clean_%s&apos; % name): value = getattr(self, &apos;clean_%s&apos; % name)() self.cleaned_data[name] = value except ValidationError as e: self.add_error(name, e) 验证过程 每一个字段过来 先进行正则匹配，没有问题 然后 hasattr 检查是否存在该字段的函数，纯在就执行该函数。 对注册 添加钩子：如果用户存在，着返回错误。1234567891011121314from app01 import modelsfrom django.core.exceptions import ValidationErrorclass TestForm(Form): user = fields.CharField() pwd = fields.CharField() def clean_user(self): val = self.cleaned_data[&apos;user&apos;] if models.UserInfo.objects.filter(username=val).count(): raise ValidationError(&apos;用户名已经存在！&apos;) else: return self.cleaned_data[&apos;user&apos;] def clean_pwd(self): return self.cleaned_data[&apos;pwd&apos;] 123456789101112131415161718# From验证源码 def full_clean(self): &quot;&quot;&quot; Cleans all of self.data and populates self._errors and self.cleaned_data. &quot;&quot;&quot; self._errors = ErrorDict() if not self.is_bound: # Stop further processing. return self.cleaned_data = &#123;&#125; # If the form is permitted to be empty, and none of the form data has # changed from the initial data, short circuit any validation. if self.empty_permitted and not self.has_changed(): return self._clean_fields() self._clean_form() self._post_clean() 1234567891011121314151617 def _clean_form(self): try: cleaned_data = self.clean() except ValidationError as e: self.add_error(None, e) else: if cleaned_data is not None: self.cleaned_data = cleaned_datadef clean(self): &quot;&quot;&quot; Hook for doing any extra form-wide cleaning after Field.clean() has been called on every field. Any ValidationError raised by this method will not be associated with a particular field; it will have a special-case association with the field named &apos;__all__&apos;. &quot;&quot;&quot; return self.cleaned_data 123456789101112131415161718192021222324from app01 import modelsfrom django.core.exceptions import ValidationErrorclass TestForm(Form): user = fields.CharField() pwd = fields.CharField() def clean_user(self): val = self.cleaned_data[&apos;user&apos;] if models.UserInfo.objects.filter(username=val).count(): raise ValidationError(&apos;用户名已经存在！&apos;) else: return self.cleaned_data[&apos;user&apos;] def clean_pwd(self): return self.cleaned_data[&apos;pwd&apos;] def clean(self): # 这个时候cleaned_data里所有的值都获取到了，可以进行 比如用户名 密码的联合唯一操作 user = self.cleaned_data.get(&apos;user&apos;) email = self.cleaned_data.get(&apos;email&apos;) if models.Student.objects.filter(user=user,email=email) raise ValidationError(&apos;用户名和邮箱已经联合已经存在！&apos;) else: return self.cleaned_data 额外添加正则","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]},{"title":"实现popup","date":"2016-07-09T00:45:57.000Z","path":"2016/07/09/实现popup/","text":"-1234567891011121314151617# views.pydef test(request): user_group_list = models.Role.objects.all() return render(request,&apos;test.html&apos;,&#123;&apos;user_group_list&apos;: user_group_list&#125;)def add_test(request): if request.method == &apos;GET&apos;: return render(request,&apos;add_test.html&apos;) else: popid = request.GET.get(&apos;popup&apos;) if popid: title = request.POST.get(&apos;title&apos;) print(title,&apos;---------&apos;) obj = models.Role.objects.create(name=title) return render(request,&apos;popup_response.html&apos;,&#123;&apos;id&apos;:obj.id,&apos;title&apos;:obj.name,&apos;popid&apos;:popid&#125;) -123456789101112131415161718192021222324252627282930313233343536&lt;!-- test.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;add-test&lt;/h3&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;select name=&quot;&quot; id=&quot;ugID&quot;&gt; &#123;% for row in user_group_list %&#125; &lt;option value=&quot;&#123;&#123; row.pk &#125;&#125;&quot;&gt;&#123;&#123; row.name &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125; &lt;/select&gt; &lt;a href=&quot;#&quot; onclick=&quot;popupUrl(&apos;/add_test/?popup=ugID&apos;)&quot;&gt;添加&lt;/a&gt; &lt;/form&gt; &lt;script&gt; function popupUrl(url) &#123; window.open(url,&apos;x1&apos;,&apos;status=1,height:500,width:600,toolbar=0,resizeable=0&apos;); &#125; function popupCallBack1(popid,opid,optext) &#123; var tag = document.createElement(&apos;option&apos;); tag.innerHTML = optext; tag.setAttribute(&apos;value&apos;,opid); tag.setAttribute(&apos;selected&apos;,&apos;selected&apos;); document.getElementById(popid).appendChild(tag) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324&lt;!-- add_test.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;添加数据&lt;/h1&gt; &lt;form method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;a href=&quot;&quot; onclick=&quot;popupUrl(&apos;/xxxxx/&apos;)&quot;&gt;再发一个&lt;/a&gt; &lt;script&gt; function popupUrl(url) &#123; window.open(url,&apos;x2&apos;,&apos;status=1,height:500,width:600,toolbar=0,resizeable=0&apos;); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617&lt;!-- popup_response.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;正在关闭的pop页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; opener.popupCallBack1(&apos;&#123;&#123; popid &#125;&#125;&apos;,&apos;&#123;&#123; id &#125;&#125;&apos;,&apos;&#123;&#123; title &#125;&#125;&apos;); window.close() &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"Python","slug":"Python","permalink":"http://midsummer.com/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://midsummer.com/tags/Django/"}]}]